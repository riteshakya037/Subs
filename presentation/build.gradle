buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.27.0'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

enum BuildType {
    DEBUG,
    RELEASE
}

static def getAppName(BuildType buildType) {
    String APP_NAME = "Subscription"
    switch (buildType) {
        case BuildType.DEBUG:
            return APP_NAME + " - " + BuildType.DEBUG.name()
        case BuildType.RELEASE:
            return APP_NAME
    }
}

android {
    signingConfigs {
        config {
            try {
                keyAlias 'subs'
                keyPassword KEY_PASSWORD
                storeFile file('../keystore.jks')
                storePassword KEYSTORE_PASSWORD
            } catch (ignored) {
                throw new InvalidUserDataException(
                        "You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)


        def globalConfiguration = rootProject.extensions.getByName("ext")
        compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
        buildToolsVersion globalConfiguration["androidBuildToolsVersion"]
        defaultConfig {
            minSdkVersion globalConfiguration["androidMinSdkVersion"]
            targetSdkVersion globalConfiguration["androidTargetSdkVersion"]

            applicationId globalConfiguration["androidApplicationId"]
            versionCode globalConfiguration["versionMajor"] * 1000000 + globalConfiguration["versionMinor"] * 10000 + code
            versionName "${globalConfiguration["versionMajor"]}.${globalConfiguration["versionMinor"]}.${code}"
            testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]
            testApplicationId globalConfiguration["testApplicationId"]
            multiDexEnabled true
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".staging"
            resValue "string", "app_name", getAppName(BuildType.DEBUG)
        }
        release {
            minifyEnabled false
            //            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            resValue "string", "app_name", getAppName(BuildType.RELEASE)
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.sourceCompatibility
    }
    productFlavors {}

    configurations.all {
        resolutionStrategy {
            force 'com.android.support:support-annotations:26.0.1'
        }
    }
}

dependencies {
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies

    implementation project(':domain')
    implementation project(':data')


    implementation presentationDependencies.appCompat
    implementation presentationDependencies.designLibrary
    implementation presentationDependencies.recyclerView
    implementation presentationDependencies.cardView
    implementation presentationDependencies.constraintLayout

    annotationProcessor presentationDependencies.parceler

    implementation presentationDependencies.dagger
    annotationProcessor presentationDependencies.daggerCompiler

    implementation presentationDependencies.butterKnife
    annotationProcessor presentationDependencies.butterKnifeCompiler

    implementation presentationDependencies.glide

    implementation presentationDependencies.navigationTabBar
    implementation presentationDependencies.roundCornerProgressBar
    implementation presentationDependencies.williamChart


    //    Testing
    androidTestImplementation presentationTestDependencies.mockito
    androidTestImplementation presentationTestDependencies.dexmaker
    androidTestImplementation presentationTestDependencies.dexmakerMockito
    androidTestImplementation presentationTestDependencies.espresso
    androidTestImplementation presentationTestDependencies.testingSupportLib

    //Development
    implementation developmentDependencies.leakCanary
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }
}
apply plugin: 'com.google.gms.google-services'

